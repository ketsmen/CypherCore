// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bgs/low/pb/client/report_types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bgs.Protocol.Report.V1 {

  /// <summary>Holder for reflection information generated from bgs/low/pb/client/report_types.proto</summary>
  public static partial class ReportTypesReflection {

    #region Descriptor
    /// <summary>File descriptor for bgs/low/pb/client/report_types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportTypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRiZ3MvbG93L3BiL2NsaWVudC9yZXBvcnRfdHlwZXMucHJvdG8SFmJncy5w",
            "cm90b2NvbC5yZXBvcnQudjEaJWJncy9sb3cvcGIvY2xpZW50L2FjY291bnRf",
            "dHlwZXMucHJvdG8aJ2Jncy9sb3cvcGIvY2xpZW50L2F0dHJpYnV0ZV90eXBl",
            "cy5wcm90bxokYmdzL2xvdy9wYi9jbGllbnQvZW50aXR5X3R5cGVzLnByb3Rv",
            "GiFiZ3MvbG93L3BiL2NsaWVudC9ycGNfdHlwZXMucHJvdG8aN2Jncy9sb3cv",
            "cGIvY2xpZW50L2dsb2JhbF9leHRlbnNpb25zL2ZpZWxkX29wdGlvbnMucHJv",
            "dG8aOWJncy9sb3cvcGIvY2xpZW50L2dsb2JhbF9leHRlbnNpb25zL21lc3Nh",
            "Z2Vfb3B0aW9ucy5wcm90bxo4YmdzL2xvdy9wYi9jbGllbnQvZ2xvYmFsX2V4",
            "dGVuc2lvbnMvbWV0aG9kX29wdGlvbnMucHJvdG8aOWJncy9sb3cvcGIvY2xp",
            "ZW50L2dsb2JhbF9leHRlbnNpb25zL3NlcnZpY2Vfb3B0aW9ucy5wcm90byKj",
            "BAoKUmVwb3J0VHlwZRIYChB1c2VyX2Rlc2NyaXB0aW9uGAEgASgJEj0KDWN1",
            "c3RvbV9yZXBvcnQYCiABKAsyJC5iZ3MucHJvdG9jb2wucmVwb3J0LnYxLkN1",
            "c3RvbVJlcG9ydEgAEjkKC3NwYW1fcmVwb3J0GAsgASgLMiIuYmdzLnByb3Rv",
            "Y29sLnJlcG9ydC52MS5TcGFtUmVwb3J0SAASRQoRaGFyYXNzbWVudF9yZXBv",
            "cnQYDCABKAsyKC5iZ3MucHJvdG9jb2wucmVwb3J0LnYxLkhhcmFzc21lbnRS",
            "ZXBvcnRIABJPChdyZWFsX2xpZmVfdGhyZWF0X3JlcG9ydBgNIAEoCzIsLmJn",
            "cy5wcm90b2NvbC5yZXBvcnQudjEuUmVhbExpZmVUaHJlYXRSZXBvcnRIABJf",
            "Ch9pbmFwcHJvcHJpYXRlX2JhdHRsZV90YWdfcmVwb3J0GA4gASgLMjQuYmdz",
            "LnByb3RvY29sLnJlcG9ydC52MS5JbmFwcHJvcHJpYXRlQmF0dGxlVGFnUmVw",
            "b3J0SAASPwoOaGFja2luZ19yZXBvcnQYDyABKAsyJS5iZ3MucHJvdG9jb2wu",
            "cmVwb3J0LnYxLkhhY2tpbmdSZXBvcnRIABI/Cg5ib3R0aW5nX3JlcG9ydBgQ",
            "IAEoCzIlLmJncy5wcm90b2NvbC5yZXBvcnQudjEuQm90dGluZ1JlcG9ydEgA",
            "QgYKBHR5cGUiYAoMQ3VzdG9tUmVwb3J0EgwKBHR5cGUYASABKAkSFgoKcHJv",
            "Z3JhbV9pZBgCIAEoCUICGAESKgoJYXR0cmlidXRlGAMgAygLMhcuYmdzLnBy",
            "b3RvY29sLkF0dHJpYnV0ZSLVAQoKU3BhbVJlcG9ydBI6CgZ0YXJnZXQYASAB",
            "KAsyKi5iZ3MucHJvdG9jb2wuYWNjb3VudC52MS5HYW1lQWNjb3VudEhhbmRs",
            "ZRJECgZzb3VyY2UYAiABKA4yLS5iZ3MucHJvdG9jb2wucmVwb3J0LnYxLlNw",
            "YW1SZXBvcnQuU3BhbVNvdXJjZToFT1RIRVIiRQoKU3BhbVNvdXJjZRIJCgVP",
            "VEhFUhABEhUKEUZSSUVORF9JTlZJVEFUSU9OEAISCwoHV0hJU1BFUhADEggK",
            "BENIQVQQBCJcChBIYXJhc3NtZW50UmVwb3J0EjoKBnRhcmdldBgBIAEoCzIq",
            "LmJncy5wcm90b2NvbC5hY2NvdW50LnYxLkdhbWVBY2NvdW50SGFuZGxlEgwK",
            "BHRleHQYAiABKAkiYAoUUmVhbExpZmVUaHJlYXRSZXBvcnQSOgoGdGFyZ2V0",
            "GAEgASgLMiouYmdzLnByb3RvY29sLmFjY291bnQudjEuR2FtZUFjY291bnRI",
            "YW5kbGUSDAoEdGV4dBgCIAEoCSJ2ChxJbmFwcHJvcHJpYXRlQmF0dGxlVGFn",
            "UmVwb3J0EjoKBnRhcmdldBgBIAEoCzIqLmJncy5wcm90b2NvbC5hY2NvdW50",
            "LnYxLkdhbWVBY2NvdW50SGFuZGxlEhoKCmJhdHRsZV90YWcYAiABKAlCBoL5",
            "KwIIASJLCg1IYWNraW5nUmVwb3J0EjoKBnRhcmdldBgBIAEoCzIqLmJncy5w",
            "cm90b2NvbC5hY2NvdW50LnYxLkdhbWVBY2NvdW50SGFuZGxlIksKDUJvdHRp",
            "bmdSZXBvcnQSOgoGdGFyZ2V0GAEgASgLMiouYmdzLnByb3RvY29sLmFjY291",
            "bnQudjEuR2FtZUFjY291bnRIYW5kbGUi5QEKBlJlcG9ydBITCgtyZXBvcnRf",
            "dHlwZRgBIAIoCRIqCglhdHRyaWJ1dGUYAiADKAsyFy5iZ3MucHJvdG9jb2wu",
            "QXR0cmlidXRlEhUKCnJlcG9ydF9xb3MYAyABKAU6ATASMQoRcmVwb3J0aW5n",
            "X2FjY291bnQYBCABKAsyFi5iZ3MucHJvdG9jb2wuRW50aXR5SWQSNgoWcmVw",
            "b3J0aW5nX2dhbWVfYWNjb3VudBgFIAEoCzIWLmJncy5wcm90b2NvbC5FbnRp",
            "dHlJZBIYChByZXBvcnRfdGltZXN0YW1wGAYgASgGQgOAAQA="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bgs.Protocol.Account.V1.AccountTypesReflection.Descriptor, global::Bgs.Protocol.AttributeTypesReflection.Descriptor, global::Bgs.Protocol.EntityTypesReflection.Descriptor, global::Bgs.Protocol.RpcTypesReflection.Descriptor, global::Bgs.Protocol.FieldOptionsReflection.Descriptor, global::Bgs.Protocol.MessageOptionsReflection.Descriptor, global::Bgs.Protocol.MethodOptionsReflection.Descriptor, global::Bgs.Protocol.ServiceOptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.ReportType), global::Bgs.Protocol.Report.V1.ReportType.Parser, new[]{ "UserDescription", "CustomReport", "SpamReport", "HarassmentReport", "RealLifeThreatReport", "InappropriateBattleTagReport", "HackingReport", "BottingReport" }, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.CustomReport), global::Bgs.Protocol.Report.V1.CustomReport.Parser, new[]{ "Type", "ProgramId", "Attribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.SpamReport), global::Bgs.Protocol.Report.V1.SpamReport.Parser, new[]{ "Target", "Source" }, null, new[]{ typeof(global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.HarassmentReport), global::Bgs.Protocol.Report.V1.HarassmentReport.Parser, new[]{ "Target", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.RealLifeThreatReport), global::Bgs.Protocol.Report.V1.RealLifeThreatReport.Parser, new[]{ "Target", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport), global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport.Parser, new[]{ "Target", "BattleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.HackingReport), global::Bgs.Protocol.Report.V1.HackingReport.Parser, new[]{ "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.BottingReport), global::Bgs.Protocol.Report.V1.BottingReport.Parser, new[]{ "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bgs.Protocol.Report.V1.Report), global::Bgs.Protocol.Report.V1.Report.Parser, new[]{ "ReportType", "Attribute", "ReportQos", "ReportingAccount", "ReportingGameAccount", "ReportTimestamp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReportType : pb::IMessage<ReportType> {
    private static readonly pb::MessageParser<ReportType> _parser = new pb::MessageParser<ReportType>(() => new ReportType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportType(ReportType other) : this() {
      userDescription_ = other.userDescription_;
      switch (other.TypeCase) {
        case TypeOneofCase.CustomReport:
          CustomReport = other.CustomReport.Clone();
          break;
        case TypeOneofCase.SpamReport:
          SpamReport = other.SpamReport.Clone();
          break;
        case TypeOneofCase.HarassmentReport:
          HarassmentReport = other.HarassmentReport.Clone();
          break;
        case TypeOneofCase.RealLifeThreatReport:
          RealLifeThreatReport = other.RealLifeThreatReport.Clone();
          break;
        case TypeOneofCase.InappropriateBattleTagReport:
          InappropriateBattleTagReport = other.InappropriateBattleTagReport.Clone();
          break;
        case TypeOneofCase.HackingReport:
          HackingReport = other.HackingReport.Clone();
          break;
        case TypeOneofCase.BottingReport:
          BottingReport = other.BottingReport.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportType Clone() {
      return new ReportType(this);
    }

    /// <summary>Field number for the "user_description" field.</summary>
    public const int UserDescriptionFieldNumber = 1;
    private readonly static string UserDescriptionDefaultValue = "";

    private string userDescription_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserDescription {
      get { return userDescription_ ?? UserDescriptionDefaultValue; }
      set {
        userDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "user_description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUserDescription {
      get { return userDescription_ != null; }
    }
    /// <summary>Clears the value of the "user_description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUserDescription() {
      userDescription_ = null;
    }

    /// <summary>Field number for the "custom_report" field.</summary>
    public const int CustomReportFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.CustomReport CustomReport {
      get { return HasCustomReport ? (global::Bgs.Protocol.Report.V1.CustomReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CustomReport;
      }
    }
    /// <summary>Gets whether the "custom_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCustomReport {
      get { return typeCase_ == TypeOneofCase.CustomReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "custom_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCustomReport() {
      if (HasCustomReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "spam_report" field.</summary>
    public const int SpamReportFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.SpamReport SpamReport {
      get { return HasSpamReport ? (global::Bgs.Protocol.Report.V1.SpamReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.SpamReport;
      }
    }
    /// <summary>Gets whether the "spam_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpamReport {
      get { return typeCase_ == TypeOneofCase.SpamReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "spam_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpamReport() {
      if (HasSpamReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "harassment_report" field.</summary>
    public const int HarassmentReportFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.HarassmentReport HarassmentReport {
      get { return HasHarassmentReport ? (global::Bgs.Protocol.Report.V1.HarassmentReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.HarassmentReport;
      }
    }
    /// <summary>Gets whether the "harassment_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHarassmentReport {
      get { return typeCase_ == TypeOneofCase.HarassmentReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "harassment_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHarassmentReport() {
      if (HasHarassmentReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "real_life_threat_report" field.</summary>
    public const int RealLifeThreatReportFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.RealLifeThreatReport RealLifeThreatReport {
      get { return HasRealLifeThreatReport ? (global::Bgs.Protocol.Report.V1.RealLifeThreatReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.RealLifeThreatReport;
      }
    }
    /// <summary>Gets whether the "real_life_threat_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealLifeThreatReport {
      get { return typeCase_ == TypeOneofCase.RealLifeThreatReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "real_life_threat_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealLifeThreatReport() {
      if (HasRealLifeThreatReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "inappropriate_battle_tag_report" field.</summary>
    public const int InappropriateBattleTagReportFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport InappropriateBattleTagReport {
      get { return HasInappropriateBattleTagReport ? (global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.InappropriateBattleTagReport;
      }
    }
    /// <summary>Gets whether the "inappropriate_battle_tag_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInappropriateBattleTagReport {
      get { return typeCase_ == TypeOneofCase.InappropriateBattleTagReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "inappropriate_battle_tag_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInappropriateBattleTagReport() {
      if (HasInappropriateBattleTagReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "hacking_report" field.</summary>
    public const int HackingReportFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.HackingReport HackingReport {
      get { return HasHackingReport ? (global::Bgs.Protocol.Report.V1.HackingReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.HackingReport;
      }
    }
    /// <summary>Gets whether the "hacking_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHackingReport {
      get { return typeCase_ == TypeOneofCase.HackingReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "hacking_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHackingReport() {
      if (HasHackingReport) {
        ClearType();
      }
    }

    /// <summary>Field number for the "botting_report" field.</summary>
    public const int BottingReportFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.BottingReport BottingReport {
      get { return HasBottingReport ? (global::Bgs.Protocol.Report.V1.BottingReport) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.BottingReport;
      }
    }
    /// <summary>Gets whether the "botting_report" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBottingReport {
      get { return typeCase_ == TypeOneofCase.BottingReport; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "botting_report" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBottingReport() {
      if (HasBottingReport) {
        ClearType();
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      CustomReport = 10,
      SpamReport = 11,
      HarassmentReport = 12,
      RealLifeThreatReport = 13,
      InappropriateBattleTagReport = 14,
      HackingReport = 15,
      BottingReport = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDescription != other.UserDescription) return false;
      if (!object.Equals(CustomReport, other.CustomReport)) return false;
      if (!object.Equals(SpamReport, other.SpamReport)) return false;
      if (!object.Equals(HarassmentReport, other.HarassmentReport)) return false;
      if (!object.Equals(RealLifeThreatReport, other.RealLifeThreatReport)) return false;
      if (!object.Equals(InappropriateBattleTagReport, other.InappropriateBattleTagReport)) return false;
      if (!object.Equals(HackingReport, other.HackingReport)) return false;
      if (!object.Equals(BottingReport, other.BottingReport)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUserDescription) hash ^= UserDescription.GetHashCode();
      if (HasCustomReport) hash ^= CustomReport.GetHashCode();
      if (HasSpamReport) hash ^= SpamReport.GetHashCode();
      if (HasHarassmentReport) hash ^= HarassmentReport.GetHashCode();
      if (HasRealLifeThreatReport) hash ^= RealLifeThreatReport.GetHashCode();
      if (HasInappropriateBattleTagReport) hash ^= InappropriateBattleTagReport.GetHashCode();
      if (HasHackingReport) hash ^= HackingReport.GetHashCode();
      if (HasBottingReport) hash ^= BottingReport.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasUserDescription) {
        output.WriteRawTag(10);
        output.WriteString(UserDescription);
      }
      if (HasCustomReport) {
        output.WriteRawTag(82);
        output.WriteMessage(CustomReport);
      }
      if (HasSpamReport) {
        output.WriteRawTag(90);
        output.WriteMessage(SpamReport);
      }
      if (HasHarassmentReport) {
        output.WriteRawTag(98);
        output.WriteMessage(HarassmentReport);
      }
      if (HasRealLifeThreatReport) {
        output.WriteRawTag(106);
        output.WriteMessage(RealLifeThreatReport);
      }
      if (HasInappropriateBattleTagReport) {
        output.WriteRawTag(114);
        output.WriteMessage(InappropriateBattleTagReport);
      }
      if (HasHackingReport) {
        output.WriteRawTag(122);
        output.WriteMessage(HackingReport);
      }
      if (HasBottingReport) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(BottingReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUserDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserDescription);
      }
      if (HasCustomReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CustomReport);
      }
      if (HasSpamReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpamReport);
      }
      if (HasHarassmentReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HarassmentReport);
      }
      if (HasRealLifeThreatReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealLifeThreatReport);
      }
      if (HasInappropriateBattleTagReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InappropriateBattleTagReport);
      }
      if (HasHackingReport) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HackingReport);
      }
      if (HasBottingReport) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BottingReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportType other) {
      if (other == null) {
        return;
      }
      if (other.HasUserDescription) {
        UserDescription = other.UserDescription;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.CustomReport:
          if (CustomReport == null) {
            CustomReport = new global::Bgs.Protocol.Report.V1.CustomReport();
          }
          CustomReport.MergeFrom(other.CustomReport);
          break;
        case TypeOneofCase.SpamReport:
          if (SpamReport == null) {
            SpamReport = new global::Bgs.Protocol.Report.V1.SpamReport();
          }
          SpamReport.MergeFrom(other.SpamReport);
          break;
        case TypeOneofCase.HarassmentReport:
          if (HarassmentReport == null) {
            HarassmentReport = new global::Bgs.Protocol.Report.V1.HarassmentReport();
          }
          HarassmentReport.MergeFrom(other.HarassmentReport);
          break;
        case TypeOneofCase.RealLifeThreatReport:
          if (RealLifeThreatReport == null) {
            RealLifeThreatReport = new global::Bgs.Protocol.Report.V1.RealLifeThreatReport();
          }
          RealLifeThreatReport.MergeFrom(other.RealLifeThreatReport);
          break;
        case TypeOneofCase.InappropriateBattleTagReport:
          if (InappropriateBattleTagReport == null) {
            InappropriateBattleTagReport = new global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport();
          }
          InappropriateBattleTagReport.MergeFrom(other.InappropriateBattleTagReport);
          break;
        case TypeOneofCase.HackingReport:
          if (HackingReport == null) {
            HackingReport = new global::Bgs.Protocol.Report.V1.HackingReport();
          }
          HackingReport.MergeFrom(other.HackingReport);
          break;
        case TypeOneofCase.BottingReport:
          if (BottingReport == null) {
            BottingReport = new global::Bgs.Protocol.Report.V1.BottingReport();
          }
          BottingReport.MergeFrom(other.BottingReport);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserDescription = input.ReadString();
            break;
          }
          case 82: {
            global::Bgs.Protocol.Report.V1.CustomReport subBuilder = new global::Bgs.Protocol.Report.V1.CustomReport();
            if (HasCustomReport) {
              subBuilder.MergeFrom(CustomReport);
            }
            input.ReadMessage(subBuilder);
            CustomReport = subBuilder;
            break;
          }
          case 90: {
            global::Bgs.Protocol.Report.V1.SpamReport subBuilder = new global::Bgs.Protocol.Report.V1.SpamReport();
            if (HasSpamReport) {
              subBuilder.MergeFrom(SpamReport);
            }
            input.ReadMessage(subBuilder);
            SpamReport = subBuilder;
            break;
          }
          case 98: {
            global::Bgs.Protocol.Report.V1.HarassmentReport subBuilder = new global::Bgs.Protocol.Report.V1.HarassmentReport();
            if (HasHarassmentReport) {
              subBuilder.MergeFrom(HarassmentReport);
            }
            input.ReadMessage(subBuilder);
            HarassmentReport = subBuilder;
            break;
          }
          case 106: {
            global::Bgs.Protocol.Report.V1.RealLifeThreatReport subBuilder = new global::Bgs.Protocol.Report.V1.RealLifeThreatReport();
            if (HasRealLifeThreatReport) {
              subBuilder.MergeFrom(RealLifeThreatReport);
            }
            input.ReadMessage(subBuilder);
            RealLifeThreatReport = subBuilder;
            break;
          }
          case 114: {
            global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport subBuilder = new global::Bgs.Protocol.Report.V1.InappropriateBattleTagReport();
            if (HasInappropriateBattleTagReport) {
              subBuilder.MergeFrom(InappropriateBattleTagReport);
            }
            input.ReadMessage(subBuilder);
            InappropriateBattleTagReport = subBuilder;
            break;
          }
          case 122: {
            global::Bgs.Protocol.Report.V1.HackingReport subBuilder = new global::Bgs.Protocol.Report.V1.HackingReport();
            if (HasHackingReport) {
              subBuilder.MergeFrom(HackingReport);
            }
            input.ReadMessage(subBuilder);
            HackingReport = subBuilder;
            break;
          }
          case 130: {
            global::Bgs.Protocol.Report.V1.BottingReport subBuilder = new global::Bgs.Protocol.Report.V1.BottingReport();
            if (HasBottingReport) {
              subBuilder.MergeFrom(BottingReport);
            }
            input.ReadMessage(subBuilder);
            BottingReport = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomReport : pb::IMessage<CustomReport> {
    private static readonly pb::MessageParser<CustomReport> _parser = new pb::MessageParser<CustomReport>(() => new CustomReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomReport(CustomReport other) : this() {
      type_ = other.type_;
      programId_ = other.programId_;
      attribute_ = other.attribute_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomReport Clone() {
      return new CustomReport(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "program_id" field.</summary>
    public const int ProgramIdFieldNumber = 2;
    private readonly static string ProgramIdDefaultValue = "";

    private string programId_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProgramId {
      get { return programId_ ?? ProgramIdDefaultValue; }
      set {
        programId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "program_id" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProgramId {
      get { return programId_ != null; }
    }
    /// <summary>Clears the value of the "program_id" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProgramId() {
      programId_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(26, global::Bgs.Protocol.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Attribute> Attribute {
      get { return attribute_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (ProgramId != other.ProgramId) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasProgramId) hash ^= ProgramId.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (HasProgramId) {
        output.WriteRawTag(18);
        output.WriteString(ProgramId);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasProgramId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramId);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomReport other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasProgramId) {
        ProgramId = other.ProgramId;
      }
      attribute_.Add(other.attribute_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            ProgramId = input.ReadString();
            break;
          }
          case 26: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpamReport : pb::IMessage<SpamReport> {
    private static readonly pb::MessageParser<SpamReport> _parser = new pb::MessageParser<SpamReport>(() => new SpamReport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpamReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpamReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpamReport(SpamReport other) : this() {
      _hasBits0 = other._hasBits0;
      target_ = other.HasTarget ? other.target_.Clone() : null;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpamReport Clone() {
      return new SpamReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private readonly static global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource SourceDefaultValue = global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource.Other;

    private global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource Source {
      get { if ((_hasBits0 & 1) != 0) { return source_; } else { return SourceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        source_ = value;
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSource {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpamReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpamReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (HasSource) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpamReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
          case 16: {
            Source = (global::Bgs.Protocol.Report.V1.SpamReport.Types.SpamSource) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SpamReport message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SpamSource {
        [pbr::OriginalName("OTHER")] Other = 1,
        [pbr::OriginalName("FRIEND_INVITATION")] FriendInvitation = 2,
        [pbr::OriginalName("WHISPER")] Whisper = 3,
        [pbr::OriginalName("CHAT")] Chat = 4,
      }

    }
    #endregion

  }

  public sealed partial class HarassmentReport : pb::IMessage<HarassmentReport> {
    private static readonly pb::MessageParser<HarassmentReport> _parser = new pb::MessageParser<HarassmentReport>(() => new HarassmentReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HarassmentReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HarassmentReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HarassmentReport(HarassmentReport other) : this() {
      target_ = other.HasTarget ? other.target_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HarassmentReport Clone() {
      return new HarassmentReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private readonly static string TextDefaultValue = "";

    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HarassmentReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HarassmentReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (HasText) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HarassmentReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RealLifeThreatReport : pb::IMessage<RealLifeThreatReport> {
    private static readonly pb::MessageParser<RealLifeThreatReport> _parser = new pb::MessageParser<RealLifeThreatReport>(() => new RealLifeThreatReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RealLifeThreatReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealLifeThreatReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealLifeThreatReport(RealLifeThreatReport other) : this() {
      target_ = other.HasTarget ? other.target_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RealLifeThreatReport Clone() {
      return new RealLifeThreatReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private readonly static string TextDefaultValue = "";

    private string text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RealLifeThreatReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RealLifeThreatReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (HasText) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RealLifeThreatReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InappropriateBattleTagReport : pb::IMessage<InappropriateBattleTagReport> {
    private static readonly pb::MessageParser<InappropriateBattleTagReport> _parser = new pb::MessageParser<InappropriateBattleTagReport>(() => new InappropriateBattleTagReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InappropriateBattleTagReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InappropriateBattleTagReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InappropriateBattleTagReport(InappropriateBattleTagReport other) : this() {
      target_ = other.HasTarget ? other.target_.Clone() : null;
      battleTag_ = other.battleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InappropriateBattleTagReport Clone() {
      return new InappropriateBattleTagReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    /// <summary>Field number for the "battle_tag" field.</summary>
    public const int BattleTagFieldNumber = 2;
    private readonly static string BattleTagDefaultValue = "";

    private string battleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BattleTag {
      get { return battleTag_ ?? BattleTagDefaultValue; }
      set {
        battleTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "battle_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattleTag {
      get { return battleTag_ != null; }
    }
    /// <summary>Clears the value of the "battle_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattleTag() {
      battleTag_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InappropriateBattleTagReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InappropriateBattleTagReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (BattleTag != other.BattleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasBattleTag) hash ^= BattleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (HasBattleTag) {
        output.WriteRawTag(18);
        output.WriteString(BattleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (HasBattleTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InappropriateBattleTagReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.HasBattleTag) {
        BattleTag = other.BattleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
          case 18: {
            BattleTag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HackingReport : pb::IMessage<HackingReport> {
    private static readonly pb::MessageParser<HackingReport> _parser = new pb::MessageParser<HackingReport>(() => new HackingReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HackingReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackingReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackingReport(HackingReport other) : this() {
      target_ = other.HasTarget ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HackingReport Clone() {
      return new HackingReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HackingReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HackingReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HackingReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BottingReport : pb::IMessage<BottingReport> {
    private static readonly pb::MessageParser<BottingReport> _parser = new pb::MessageParser<BottingReport>(() => new BottingReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BottingReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BottingReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BottingReport(BottingReport other) : this() {
      target_ = other.HasTarget ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BottingReport Clone() {
      return new BottingReport(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Bgs.Protocol.Account.V1.GameAccountHandle target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.Account.V1.GameAccountHandle Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }
    /// <summary>Gets whether the target field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTarget {
      get { return target_ != null; }
    }
    /// <summary>Clears the value of the target field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BottingReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BottingReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTarget) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BottingReport other) {
      if (other == null) {
        return;
      }
      if (other.HasTarget) {
        if (!HasTarget) {
          Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasTarget) {
              Target = new global::Bgs.Protocol.Account.V1.GameAccountHandle();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Report : pb::IMessage<Report> {
    private static readonly pb::MessageParser<Report> _parser = new pb::MessageParser<Report>(() => new Report());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bgs.Protocol.Report.V1.ReportTypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report(Report other) : this() {
      _hasBits0 = other._hasBits0;
      reportType_ = other.reportType_;
      attribute_ = other.attribute_.Clone();
      reportQos_ = other.reportQos_;
      reportingAccount_ = other.HasReportingAccount ? other.reportingAccount_.Clone() : null;
      reportingGameAccount_ = other.HasReportingGameAccount ? other.reportingGameAccount_.Clone() : null;
      reportTimestamp_ = other.reportTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report Clone() {
      return new Report(this);
    }

    /// <summary>Field number for the "report_type" field.</summary>
    public const int ReportTypeFieldNumber = 1;
    private readonly static string ReportTypeDefaultValue = "";

    private string reportType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReportType {
      get { return reportType_ ?? ReportTypeDefaultValue; }
      set {
        reportType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "report_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportType {
      get { return reportType_ != null; }
    }
    /// <summary>Clears the value of the "report_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportType() {
      reportType_ = null;
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bgs.Protocol.Attribute> _repeated_attribute_codec
        = pb::FieldCodec.ForMessage(18, global::Bgs.Protocol.Attribute.Parser);
    private readonly pbc::RepeatedField<global::Bgs.Protocol.Attribute> attribute_ = new pbc::RepeatedField<global::Bgs.Protocol.Attribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bgs.Protocol.Attribute> Attribute {
      get { return attribute_; }
    }

    /// <summary>Field number for the "report_qos" field.</summary>
    public const int ReportQosFieldNumber = 3;
    private readonly static int ReportQosDefaultValue = 0;

    private int reportQos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReportQos {
      get { if ((_hasBits0 & 1) != 0) { return reportQos_; } else { return ReportQosDefaultValue; } }
      set {
        _hasBits0 |= 1;
        reportQos_ = value;
      }
    }
    /// <summary>Gets whether the "report_qos" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportQos {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "report_qos" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportQos() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "reporting_account" field.</summary>
    public const int ReportingAccountFieldNumber = 4;
    private global::Bgs.Protocol.EntityId reportingAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.EntityId ReportingAccount {
      get { return reportingAccount_; }
      set {
        reportingAccount_ = value;
      }
    }
    /// <summary>Gets whether the reporting_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportingAccount {
      get { return reportingAccount_ != null; }
    }
    /// <summary>Clears the value of the reporting_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportingAccount() {
      reportingAccount_ = null;
    }

    /// <summary>Field number for the "reporting_game_account" field.</summary>
    public const int ReportingGameAccountFieldNumber = 5;
    private global::Bgs.Protocol.EntityId reportingGameAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bgs.Protocol.EntityId ReportingGameAccount {
      get { return reportingGameAccount_; }
      set {
        reportingGameAccount_ = value;
      }
    }
    /// <summary>Gets whether the reporting_game_account field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportingGameAccount {
      get { return reportingGameAccount_ != null; }
    }
    /// <summary>Clears the value of the reporting_game_account field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportingGameAccount() {
      reportingGameAccount_ = null;
    }

    /// <summary>Field number for the "report_timestamp" field.</summary>
    public const int ReportTimestampFieldNumber = 6;
    private readonly static ulong ReportTimestampDefaultValue = 0UL;

    private ulong reportTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReportTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return reportTimestamp_; } else { return ReportTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        reportTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "report_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReportTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "report_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReportTimestamp() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportType != other.ReportType) return false;
      if(!attribute_.Equals(other.attribute_)) return false;
      if (ReportQos != other.ReportQos) return false;
      if (!object.Equals(ReportingAccount, other.ReportingAccount)) return false;
      if (!object.Equals(ReportingGameAccount, other.ReportingGameAccount)) return false;
      if (ReportTimestamp != other.ReportTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasReportType) hash ^= ReportType.GetHashCode();
      hash ^= attribute_.GetHashCode();
      if (HasReportQos) hash ^= ReportQos.GetHashCode();
      if (HasReportingAccount) hash ^= ReportingAccount.GetHashCode();
      if (HasReportingGameAccount) hash ^= ReportingGameAccount.GetHashCode();
      if (HasReportTimestamp) hash ^= ReportTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasReportType) {
        output.WriteRawTag(10);
        output.WriteString(ReportType);
      }
      attribute_.WriteTo(output, _repeated_attribute_codec);
      if (HasReportQos) {
        output.WriteRawTag(24);
        output.WriteInt32(ReportQos);
      }
      if (HasReportingAccount) {
        output.WriteRawTag(34);
        output.WriteMessage(ReportingAccount);
      }
      if (HasReportingGameAccount) {
        output.WriteRawTag(42);
        output.WriteMessage(ReportingGameAccount);
      }
      if (HasReportTimestamp) {
        output.WriteRawTag(49);
        output.WriteFixed64(ReportTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasReportType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportType);
      }
      size += attribute_.CalculateSize(_repeated_attribute_codec);
      if (HasReportQos) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReportQos);
      }
      if (HasReportingAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportingAccount);
      }
      if (HasReportingGameAccount) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportingGameAccount);
      }
      if (HasReportTimestamp) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report other) {
      if (other == null) {
        return;
      }
      if (other.HasReportType) {
        ReportType = other.ReportType;
      }
      attribute_.Add(other.attribute_);
      if (other.HasReportQos) {
        ReportQos = other.ReportQos;
      }
      if (other.HasReportingAccount) {
        if (!HasReportingAccount) {
          ReportingAccount = new global::Bgs.Protocol.EntityId();
        }
        ReportingAccount.MergeFrom(other.ReportingAccount);
      }
      if (other.HasReportingGameAccount) {
        if (!HasReportingGameAccount) {
          ReportingGameAccount = new global::Bgs.Protocol.EntityId();
        }
        ReportingGameAccount.MergeFrom(other.ReportingGameAccount);
      }
      if (other.HasReportTimestamp) {
        ReportTimestamp = other.ReportTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ReportType = input.ReadString();
            break;
          }
          case 18: {
            attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
            break;
          }
          case 24: {
            ReportQos = input.ReadInt32();
            break;
          }
          case 34: {
            if (!HasReportingAccount) {
              ReportingAccount = new global::Bgs.Protocol.EntityId();
            }
            input.ReadMessage(ReportingAccount);
            break;
          }
          case 42: {
            if (!HasReportingGameAccount) {
              ReportingGameAccount = new global::Bgs.Protocol.EntityId();
            }
            input.ReadMessage(ReportingGameAccount);
            break;
          }
          case 49: {
            ReportTimestamp = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
